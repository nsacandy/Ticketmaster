@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Ticketmaster.Utilities.GroupManagementViewModel

@{
    ViewData["Title"] = "Group Management";
}

<div class="container text-center">
    <h3 class="d-inline">Groups</h3>
    <button type="button" class="btn btn-success float-end" id="openCreateGroupModal">
        +
    </button>

    <style>
        .selected {
            background-color: #007bff;
            color: white;
        }
    </style>

    <ul class="list-group mx-auto mt-3" style="max-width: 600px;" id="groupList">
        @foreach (var group in Model.Groups)
        {
            <li class="list-group-item group-item"
                data-groupid="@group.GroupId"
                data-groupname="@group.GroupName"
                data-managerid="@group.ManagerId"
                data-managername="@(group.Manager != null ? group.Manager.Employee.FirstName + " " + group.Manager.Employee.LastName : "No Manager")"
                data-employeeids="@group.EmployeeIds"
                data-employeenames="@(string.Join(", ", Model.Employees.Where(e => group.EmployeeIds.Split(',').Contains(e.Id.ToString())).Select(e => e.FirstName + " " + e.LastName)))">
                @group.GroupName
            </li>
        }
    </ul>
</div>

<!-- Create Group Modal -->
<div class="modal fade" id="createGroupModal" tabindex="-1" aria-labelledby="createGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createGroupModalLabel">Create New Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="groupCreationForm">
                    <div class="mb-3">
                        <label for="groupName" class="form-label">Group Name</label>
                        <input type="text" id="groupName" name="groupName" class="form-control" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Manager</label>
                        <input type="text" id="managerBox" class="form-control" readonly />
                    </div>

                    <div class="row">
                        <div class="col-md-5">
                            <label class="form-label">Available Employees</label>
                            <input type="text" id="searchEmployee" class="form-control mb-2" placeholder="Search...">
                            <ul class="list-group" id="availableEmployeesList">
                                @foreach (var employee in Model.Employees)
                                {
                                    <li class="list-group-item employee-item"
                                        data-employeeid="@employee.Id"
                                        data-employeename="@employee.FirstName @employee.LastName">
                                        @employee.FirstName @employee.LastName
                                    </li>
                                }
                            </ul>
                        </div>

                        <div class="col-md-2 text-center mt-4">
                            <button type="button" class="btn btn-secondary mb-2" id="setManagerBtn">M</button><br>
                            <button type="button" class="btn btn-primary mb-2" id="addEmployeeBtn">></button><br>
                            <button type="button" class="btn btn-primary" id="removeEmployeeBtn"><</button>
                        </div>

                        <div class="col-md-5">
                            <label class="form-label">Group Members</label>
                            <ul class="list-group" id="groupMembersList"></ul>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Create Group</button>
                    </div>

                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Group Modal -->
<div class="modal fade" id="editGroupModal" tabindex="-1" aria-labelledby="editGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editGroupModalLabel">Edit Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editGroupForm">
                    <div class="mb-3">
                        <label for="editGroupName" class="form-label">Group Name</label>
                        <input type="text" id="editGroupName" name="groupName" class="form-control" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Manager</label>
                        <input type="text" id="editManagerBox" class="form-control" readonly />
                    </div>

                    <div class="row">
                        <div class="col-md-5">
                            <label class="form-label">Available Employees</label>
                            <input type="text" id="editSearchEmployee" class="form-control mb-2" placeholder="Search...">
                            <ul class="list-group" id="editAvailableEmployeesList"></ul>
                        </div>

                        <div class="col-md-2 text-center mt-4">
                            <button type="button" class="btn btn-secondary mb-2" id="editSetManagerBtn">M</button><br>
                            <button type="button" class="btn btn-primary mb-2" id="editAddEmployeeBtn">></button><br>
                            <button type="button" class="btn btn-primary" id="editRemoveEmployeeBtn"><</button>
                        </div>

                        <div class="col-md-5">
                            <label class="form-label">Group Members</label>
                            <ul class="list-group" id="editGroupMembersList"></ul>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Edit Group</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        let availableEmployeesList = document.getElementById("availableEmployeesList");
        let groupMembersList = document.getElementById("groupMembersList");
        let managerBox = document.getElementById("managerBox");
        let selectedEmployee = null;
        let previousManager = null;

        let editAvailableEmployeesList = document.getElementById("editAvailableEmployeesList");
        let editGroupMembersList = document.getElementById("editGroupMembersList");
        let editManagerBox = document.getElementById("editManagerBox");
        let selectedEditEmployee = null;
        let previousEditManager = null;
        let selectedGroupId = null;

        document.getElementById("openCreateGroupModal").addEventListener("click", function () {
            new bootstrap.Modal(document.getElementById("createGroupModal")).show();
        });

        function selectEmployee(list, item) {
            list.querySelectorAll(".list-group-item").forEach(emp => emp.classList.remove("selected"));
            item.classList.add("selected");
            selectedEmployee = item;
        }

        document.querySelectorAll("#availableEmployeesList .list-group-item, #groupMembersList .list-group-item").forEach(item => {
            item.addEventListener("click", function () {
                selectEmployee(this.parentElement, this);
            });
        });

        document.getElementById("addEmployeeBtn").addEventListener("click", function () {
            if (selectedEmployee && selectedEmployee.parentElement === availableEmployeesList) {
                groupMembersList.appendChild(selectedEmployee);
                selectedEmployee.classList.remove("selected");
                selectedEmployee = null;
            }
        });

        document.getElementById("removeEmployeeBtn").addEventListener("click", function () {
            if (selectedEmployee && selectedEmployee.parentElement === groupMembersList) {
                availableEmployeesList.appendChild(selectedEmployee);
                selectedEmployee.classList.remove("selected");
                selectedEmployee = null;
            }
        });

        document.getElementById("setManagerBtn").addEventListener("click", function () {
            if (selectedEmployee && selectedEmployee.parentElement === groupMembersList) {
                if (previousManager) {
                    groupMembersList.appendChild(previousManager);
                }

                managerBox.value = selectedEmployee.getAttribute("data-employeename");
                previousManager = selectedEmployee;
                selectedEmployee.remove();
                selectedEmployee = null;
            }
        });

        document.getElementById("searchEmployee").addEventListener("input", function () {
            let query = this.value.toLowerCase();
            document.querySelectorAll("#availableEmployeesList .list-group-item").forEach(item => {
                item.style.display = item.getAttribute("data-employeename").toLowerCase().includes(query) ? "" : "none";
            });
        });

        document.querySelectorAll(".list-group").forEach(list => {
            list.addEventListener("click", function (event) {
                if (event.target.classList.contains("list-group-item")) {
                    list.querySelectorAll(".list-group-item").forEach(item => item.classList.remove("selected"));
                    event.target.classList.add("selected");
                }
            });
        });

        document.getElementById("groupCreationForm").addEventListener("submit", function (event) {
            event.preventDefault();
            let groupName = document.getElementById("groupName").value;
            let managerId = previousManager ? previousManager.getAttribute("data-employeeid") : null;
            let employeeIds = [...groupMembersList.children].map(emp => emp.getAttribute("data-employeeid"));

            if (!groupName || !managerId || employeeIds.length === 0) {
                alert("Please enter a group name, select a manager, and add at least one employee.");
                return;
            }

            fetch("/GroupManagement/CreateGroup", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ groupName, managerId, employeeIds })
            })
            .then(response => {
                if (response.ok) {
                    alert("Group created successfully!");
                    location.reload();
                } else {
                    alert("Error creating group.");
                }
            })
            .catch(error => console.error("Error:", error));
        });

        document.querySelectorAll(".group-item").forEach(groupItem => {
            groupItem.addEventListener("dblclick", function () {
            selectedGroupId = this.getAttribute("data-groupid");
            document.getElementById("editGroupName").value = this.getAttribute("data-groupname");
            editManagerBox.value = this.getAttribute("data-managername");

            let managerId = this.getAttribute("data-managerid");
            let employeeIds = this.getAttribute("data-employeeids").split(",");

            editGroupMembersList.innerHTML = "";
            editAvailableEmployeesList.innerHTML = "";

            document.querySelectorAll("#availableEmployeesList .list-group-item").forEach(emp => {
                let empId = emp.getAttribute("data-employeeid");
                let empName = emp.getAttribute("data-employeename");

                let newItem = emp.cloneNode(true);
                newItem.classList.remove("selected");

                if (empId === managerId) {
                    editManagerBox.value = empName;
                    previousEditManager = newItem;
                } else if (employeeIds.includes(empId)) {
                    editGroupMembersList.appendChild(newItem);
                } else {
                    editAvailableEmployeesList.appendChild(newItem);
                }
            });

            attachEventListenersToEditModal();
            new bootstrap.Modal(document.getElementById("editGroupModal")).show();

            });
        });

        function attachEventListenersToEditModal() {
            document.querySelectorAll("#editAvailableEmployeesList .list-group-item, #editGroupMembersList .list-group-item").forEach(item => {
                item.addEventListener("click", function () {
                    selectEditEmployee(this.parentElement, this);
                });
            });

            document.getElementById("editAddEmployeeBtn").addEventListener("click", function () {
                if (selectedEditEmployee && selectedEditEmployee.parentElement === editAvailableEmployeesList) {
                    editGroupMembersList.appendChild(selectedEditEmployee);
                    selectedEditEmployee.classList.remove("selected");
                    selectedEditEmployee = null;
                }
            });

            document.getElementById("editRemoveEmployeeBtn").addEventListener("click", function () {
                if (selectedEditEmployee && selectedEditEmployee.parentElement === editGroupMembersList) {
                    editAvailableEmployeesList.appendChild(selectedEditEmployee);
                    selectedEditEmployee.classList.remove("selected");
                    selectedEditEmployee = null;
                }
            });

            document.getElementById("editSetManagerBtn").addEventListener("click", function () {
                if (selectedEditEmployee && selectedEditEmployee.parentElement === editGroupMembersList) {
                    if (previousEditManager) {
                        let previousManagerItem = previousEditManager.cloneNode(true);
                        previousManagerItem.classList.remove("selected");

                        previousManagerItem.addEventListener("click", function () {
                            selectEditEmployee(editGroupMembersList, this);
                        });

                        editGroupMembersList.appendChild(previousManagerItem);
                    }

                    editManagerBox.value = selectedEditEmployee.getAttribute("data-employeename");
                    previousEditManager = selectedEditEmployee;

                    selectedEditEmployee.remove();
                    selectedEditEmployee = null;
                }
            });

        }

        function selectEditEmployee(list, item) {
            list.querySelectorAll(".list-group-item").forEach(emp => emp.classList.remove("selected"));
            item.classList.add("selected");
            selectedEditEmployee = item;
        }

        document.getElementById("editGroupForm").addEventListener("submit", function (event) {
            event.preventDefault();

            let groupName = document.getElementById("editGroupName").value;
            let managerId = previousEditManager ? previousEditManager.getAttribute("data-employeeid") : null;
            let employeeIds = [...editGroupMembersList.children].map(emp => emp.getAttribute("data-employeeid"));

            if (!managerId) {
                managerId = document.querySelector(".group-item[data-groupid='" + selectedGroupId + "']").getAttribute("data-managerid");
            }

            if (employeeIds.length === 0) {
                let existingEmployeeIds = document.querySelector(".group-item[data-groupid='" + selectedGroupId + "']").getAttribute("data-employeeids");
                employeeIds = existingEmployeeIds ? existingEmployeeIds.split(",") : [];
            }

            fetch("/GroupManagement/EditGroup", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ groupId: selectedGroupId, groupName, managerId, employeeIds })
            })
            .then(response => {
                if (response.ok) {
                    alert("Group updated successfully!");
                    location.reload();
                } else {
                    alert("Error updating group.");
                }
            })
            .catch(error => console.error("Error:", error));
        });
    });
</script>
