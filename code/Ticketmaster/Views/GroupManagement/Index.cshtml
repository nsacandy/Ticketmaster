@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Ticketmaster.Utilities.GroupManagementViewModel

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<script>
    const currentUserId = @HttpContextAccessor.HttpContext.User.FindFirst("Id").Value;
</script>

@{
    ViewData["Title"] = "Group Management";
}

<div class="container text-center">
    <h3 class="d-inline">Groups</h3>

    <button type="button" class="btn btn-success float-end" id="openCreateGroupModal">
        +
    </button>

    <div id="createGroupError" class="alert alert-danger mt-3 d-none" role="alert">
        Access denied. You must have admin privileges to access this feature.
    </div>

    <style>
        .selected {
            background-color: #007bff;
            color: white;
        }
    </style>

    <style>
        .selected {
            background-color: #007bff;
            color: white;
        }
    </style>

    <ul class="list-group mx-auto mt-3" style="max-width: 600px;" id="groupList">
        @foreach (var group in Model.Groups)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center group-item"
                data-groupid="@group.GroupId"
                data-groupname="@group.GroupName"
                data-managerid="@group.ManagerId"
                data-managername="@(group.Manager != null ? group.Manager.Employee.FirstName + " " + group.Manager.Employee.LastName : "No Manager")"
                data-employeeids="@group.EmployeeIds"
                data-employeenames="@(string.Join(", ", Model.Employees.Where(e => group.EmployeeIds.Split(',').Contains(e.Id.ToString())).Select(e => e.FirstName + " " + e.LastName)))">

                <span>
                    @group.GroupName @(group.Manager != null ? $"({group.Manager.Employee.FirstName} {group.Manager.Employee.LastName})" : "")
                </span>

                <span>

					@if ((bool)ViewBag.IsAdmin || group.ManagerId.ToString() == (string)ViewBag.LoggedInUserId)
					{
						<button class="btn btn-outline-primary btn-sm me-2"
								data-action="edit"
								title="Edit Group">
							✏️
						</button>
					}

	                <button class="btn btn-outline-info btn-sm"
	                        data-action="view"
	                        title="View Group">
		                ℹ️
	                </button>
				</span>
            </li>
        }
    </ul>

</div>

<!-- Create Group Modal -->
<div class="modal fade" id="createGroupModal" tabindex="-1" aria-labelledby="createGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createGroupModalLabel">Create New Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="groupCreationForm">
                    <div class="mb-3">
                        <label for="groupName" class="form-label">Group Name</label>
                        <input type="text" id="groupName" name="groupName" class="form-control" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Manager</label>
                        <input type="text" id="managerBox" class="form-control" readonly />
                    </div>

                    <div class="row">
                        <div class="col-md-5">
                            <label class="form-label">Available Employees</label>
                            <input type="text" id="searchEmployee" class="form-control mb-2" placeholder="Search...">
                            <ul class="list-group" id="availableEmployeesList">
                                @foreach (var employee in Model.Employees)
                                {
                                    <li class="list-group-item employee-item"
                                        data-employeeid="@employee.Id"
                                        data-employeename="@employee.FirstName @employee.LastName">
                                        @employee.FirstName @employee.LastName
                                    </li>
                                }
                            </ul>
                        </div>

                        <div class="col-md-2 text-center mt-4">
                            <button type="button" class="btn btn-secondary mb-2" id="setManagerBtn">M</button><br>
                            <button type="button" class="btn btn-primary mb-2" id="addEmployeeBtn">→</button><br>
                            <button type="button" class="btn btn-primary" id="removeEmployeeBtn">←</button>
                        </div>

                        <div class="col-md-5">
                            <label class="form-label">Group Members</label>
                            <ul class="list-group" id="groupMembersList"></ul>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Create Group</button>
                    </div>

                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Group Modal -->
<div class="modal fade" id="editGroupModal" tabindex="-1" aria-labelledby="editGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editGroupModalLabel">Edit Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="deleteGroupError" class="alert alert-danger d-none" role="alert"></div>
                <form id="editGroupForm">
                    <div class="mb-3">
                        <label for="editGroupName" class="form-label">Group Name</label>
                        <input type="text" id="editGroupName" name="groupName" class="form-control" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Manager</label>
                        <input type="text" id="editManagerBox" class="form-control" readonly />
                    </div>

                    <div class="row">
                        <div class="col-md-5">
                            <label class="form-label">Available Employees</label>
                            <input type="text" id="editSearchEmployee" class="form-control mb-2" placeholder="Search...">
                            <ul class="list-group" id="editAvailableEmployeesList"></ul>
                        </div>

                        <div class="col-md-2 text-center mt-4" id="editGroupActionButtons">
                            <button type="button" class="btn btn-secondary mb-2" id="editSetManagerBtn">M</button><br>
                            <button type="button" class="btn btn-primary mb-2" id="editAddEmployeeBtn">→</button><br>
                            <button type="button" class="btn btn-primary" id="editRemoveEmployeeBtn">←</button>
                        </div>

                        <div class="col-md-5">
                            <label class="form-label">Group Members</label>
                            <ul class="list-group" id="editGroupMembersList"></ul>
                        </div>
                    </div>

                    <div class="modal-footer" id="editGroupModalFooter">
                        <button type="button" class="btn btn-danger" id="deleteGroupBtn">Delete</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Edit Group</button>
                    </div>

                </form>
            </div>
        </div>
    </div>
</div>

<!-- View Group Modal -->
<div class="modal fade" id="viewGroupModal" tabindex="-1" aria-labelledby="viewGroupModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content bg-dark text-white">
			<div class="modal-header">
				<h5 class="modal-title" id="viewGroupModalLabel">Group Details</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="mb-3">
					<label class="form-label">Group Name</label>
					<input type="text" id="viewGroupName" class="form-control" readonly />
				</div>
				<div class="mb-3">
					<label class="form-label">Manager</label>
					<input type="text" id="viewManagerBox" class="form-control" readonly />
				</div>
				<div class="mb-3">
					<label class="form-label">Group Members</label>
					<ul class="list-group" id="viewGroupMembersList"></ul>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	// ========= GLOBAL VARIABLES =========
	let availableEmployeesList, groupMembersList, managerBox;
	let editAvailableEmployeesList, editGroupMembersList, editManagerBox;
	let selectedEmployee = null, previousManager = null;
	let selectedEditEmployee = null, previousEditManager = null;
	let selectedGroupId = null;

	const loggedInUserId = '@ViewBag.LoggedInUserId';
	const isAdmin = '@ViewBag.IsAdmin'.toLowerCase() === 'true';

	// ========= MAIN EVENT BINDINGS =========
	document.addEventListener("DOMContentLoaded", function () {
		// Element initialization
		availableEmployeesList = document.getElementById("availableEmployeesList");
		groupMembersList = document.getElementById("groupMembersList");
		managerBox = document.getElementById("managerBox");

		editAvailableEmployeesList = document.getElementById("editAvailableEmployeesList");
		editGroupMembersList = document.getElementById("editGroupMembersList");
		editManagerBox = document.getElementById("editManagerBox");

		// Button actions
		document.getElementById("openCreateGroupModal").addEventListener("click", handleCreateModalOpen);
		document.getElementById("addEmployeeBtn").addEventListener("click", addEmployeeToGroup);
		document.getElementById("removeEmployeeBtn").addEventListener("click", removeEmployeeFromGroup);
		document.getElementById("setManagerBtn").addEventListener("click", setGroupManager);
		document.getElementById("groupCreationForm").addEventListener("submit", handleGroupCreate);
		document.getElementById("editGroupForm").addEventListener("submit", handleGroupEdit);
		document.getElementById("deleteGroupBtn").addEventListener("click", handleGroupDelete);

		document.getElementById("searchEmployee").addEventListener("input", handleEmployeeSearch);

		// Edit button triggers
		document.querySelectorAll(".group-item button[data-action='edit']").forEach(btn => {
			btn.addEventListener("click", function () {
				const groupItem = this.closest(".group-item");
				openEditGroupModal(groupItem);
			});
		});

		// Bind view group buttons
		document.querySelectorAll(".group-item button[data-action='view']").forEach(btn => {
			btn.addEventListener("click", function () {
				const groupItem = this.closest(".group-item");
				openViewGroupModal(groupItem);
			});
		});

		// List selection styling
		document.querySelectorAll(".list-group").forEach(list => {
			list.addEventListener("click", e => {
				if (e.target.classList.contains("list-group-item")) {
					list.querySelectorAll(".list-group-item").forEach(i => i.classList.remove("selected"));
					e.target.classList.add("selected");
					selectedEmployee = e.target;
				}
			});
		});
	});

	// ========= MODAL OPENERS =========
	function handleCreateModalOpen() {
		const errorDiv = document.getElementById("createGroupError");
		if (!isAdmin) {
			errorDiv.classList.remove("d-none");
			setTimeout(() => errorDiv.classList.add("d-none"), 4000);
			return;
		}
		new bootstrap.Modal(document.getElementById("createGroupModal")).show();
	}

	function openEditGroupModal(groupItem) {
		selectedGroupId = groupItem.getAttribute("data-groupid");
		const selectedManagerId = groupItem.getAttribute("data-managerid");

		// Setup modal fields
		const groupNameInput = document.getElementById("editGroupName");
		groupNameInput.value = groupItem.getAttribute("data-groupname");
		groupNameInput.readOnly = !(isAdmin || selectedManagerId === loggedInUserId);

		editManagerBox.value = groupItem.getAttribute("data-managername");

		const modalFooter = document.getElementById("editGroupModalFooter");
		const actionButtonsDiv = document.getElementById("editGroupActionButtons");

		const canEdit = isAdmin || selectedManagerId === loggedInUserId;
		modalFooter.style.display = canEdit ? "flex" : "none";
		actionButtonsDiv.style.display = canEdit ? "block" : "none";

		const managerId = selectedManagerId;
		const employeeIds = groupItem.getAttribute("data-employeeids").split(",");

		// Refresh lists
		editGroupMembersList.innerHTML = "";
		editAvailableEmployeesList.innerHTML = "";

		document.querySelectorAll("#availableEmployeesList .list-group-item").forEach(emp => {
			const empId = emp.getAttribute("data-employeeid");
			const empName = emp.getAttribute("data-employeename");
			const newItem = emp.cloneNode(true);
			newItem.classList.remove("selected");

			if (empId === managerId) {
				editManagerBox.value = empName;
				previousEditManager = newItem;
			} else if (employeeIds.includes(empId)) {
				editGroupMembersList.appendChild(newItem);
			} else {
				editAvailableEmployeesList.appendChild(newItem);
			}
		});

		attachEventListenersToEditModal();
		new bootstrap.Modal(document.getElementById("editGroupModal")).show();
	}

	function openViewGroupModal(groupItem) {
		const name = groupItem.getAttribute("data-groupname");
		const manager = groupItem.getAttribute("data-managername");
		const memberNames = groupItem.getAttribute("data-employeenames").split(",").map(n => n.trim());

		document.getElementById("viewGroupName").value = name;
		document.getElementById("viewManagerBox").value = manager;

		const list = document.getElementById("viewGroupMembersList");
		list.innerHTML = "";
		memberNames.forEach(name => {
			const li = document.createElement("li");
			li.className = "list-group-item bg-transparent text-white border-white";
			li.textContent = name;
			list.appendChild(li);
		});

		new bootstrap.Modal(document.getElementById("viewGroupModal")).show();
	}

	// ========= CREATE GROUP LOGIC =========
	function addEmployeeToGroup() {
		if (selectedEmployee && selectedEmployee.parentElement === availableEmployeesList) {
			groupMembersList.appendChild(selectedEmployee);
			selectedEmployee.classList.remove("selected");
			selectedEmployee = null;
		}
	}

	function removeEmployeeFromGroup() {
		if (selectedEmployee && selectedEmployee.parentElement === groupMembersList) {
			availableEmployeesList.appendChild(selectedEmployee);
			selectedEmployee.classList.remove("selected");
			selectedEmployee = null;
		}
	}

	function setGroupManager() {
		if (selectedEmployee && selectedEmployee.parentElement === groupMembersList) {
			if (previousManager) {
				groupMembersList.appendChild(previousManager);
			}
			managerBox.value = selectedEmployee.getAttribute("data-employeename");
			previousManager = selectedEmployee;
			selectedEmployee.remove();
			selectedEmployee = null;
		}
	}

	function handleGroupCreate(event) {
		event.preventDefault();

		const groupName = document.getElementById("groupName").value;
		const managerId = previousManager ? previousManager.getAttribute("data-employeeid") : null;
		const employeeIds = [...groupMembersList.children].map(emp => emp.getAttribute("data-employeeid"));

		if (!groupName || !managerId || employeeIds.length === 0) {
			alert("Please enter a group name, select a manager, and add at least one employee.");
			return;
		}

		fetch("/GroupManagement/CreateGroup", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ groupName, managerId, employeeIds })
		})
			.then(res => res.ok ? location.reload() : alert("Error creating group."))
			.catch(error => console.error("Error:", error));
	}

	function handleEmployeeSearch() {
		const query = this.value.toLowerCase();
		document.querySelectorAll("#availableEmployeesList .list-group-item").forEach(item => {
			item.style.display = item.getAttribute("data-employeename").toLowerCase().includes(query) ? "" : "none";
		});
	}

	// ========= EDIT GROUP LOGIC =========
	function attachEventListenersToEditModal() {
		document.querySelectorAll("#editAvailableEmployeesList .list-group-item, #editGroupMembersList .list-group-item").forEach(item => {
			item.addEventListener("click", () => {
				item.parentElement.querySelectorAll(".list-group-item").forEach(i => i.classList.remove("selected"));
				item.classList.add("selected");
				selectedEditEmployee = item;
			});
		});

		document.getElementById("editAddEmployeeBtn").addEventListener("click", () => {
			if (selectedEditEmployee && selectedEditEmployee.parentElement === editAvailableEmployeesList) {
				editGroupMembersList.appendChild(selectedEditEmployee);
				selectedEditEmployee.classList.remove("selected");
				selectedEditEmployee = null;
			}
		});

		document.getElementById("editRemoveEmployeeBtn").addEventListener("click", () => {
			if (selectedEditEmployee && selectedEditEmployee.parentElement === editGroupMembersList) {
				editAvailableEmployeesList.appendChild(selectedEditEmployee);
				selectedEditEmployee.classList.remove("selected");
				selectedEditEmployee = null;
			}
		});

		document.getElementById("editSetManagerBtn").addEventListener("click", () => {
			if (selectedEditEmployee && selectedEditEmployee.parentElement === editGroupMembersList) {
				if (previousEditManager) {
					let previousItem = previousEditManager.cloneNode(true);
					previousItem.classList.remove("selected");
					previousItem.addEventListener("click", () => selectEditEmployee(editGroupMembersList, previousItem));
					editGroupMembersList.appendChild(previousItem);
				}
				editManagerBox.value = selectedEditEmployee.getAttribute("data-employeename");
				previousEditManager = selectedEditEmployee;
				selectedEditEmployee.remove();
				selectedEditEmployee = null;
			}
		});
	}

	function handleGroupEdit(event) {
		event.preventDefault();

		const groupName = document.getElementById("editGroupName").value;
		let managerId = previousEditManager?.getAttribute("data-employeeid")
			?? document.querySelector(`.group-item[data-groupid='${selectedGroupId}']`)?.getAttribute("data-managerid");

		const employeeIds = [...editGroupMembersList.children].map(emp => emp.getAttribute("data-employeeid"));

		fetch("/GroupManagement/EditGroup", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ groupId: selectedGroupId, groupName, managerId, employeeIds })
		})
		.then(res => res.json().then(data => ({ status: res.status, body: data })))
		.then(result => {
			if (result.status === 200) {
				location.reload();
			} else {
				const errorDiv = document.getElementById("deleteGroupError");
				errorDiv.textContent = result.body.message || "Error updating group.";
				errorDiv.classList.remove("d-none");
				setTimeout(() => errorDiv.classList.add("d-none"), 3000);
			}
		})
		.catch(error => {
			const errorDiv = document.getElementById("deleteGroupError");
			errorDiv.textContent = "Unexpected error: " + error.message;
			errorDiv.classList.remove("d-none");
			setTimeout(() => errorDiv.classList.add("d-none"), 3000);
		});
	}

	function handleGroupDelete() {
		if (!selectedGroupId || !confirm("Are you sure you want to delete this group? This action cannot be undone.")) return;

		fetch("/GroupManagement/DeleteGroup", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ groupId: selectedGroupId })
		})
			.then(res => res.json().then(data => ({ status: res.status, body: data })))
			.then(result => {
				const errorDiv = document.getElementById("deleteGroupError");
				if (result.status === 200) {
					alert(result.body.message);
					location.reload();
				} else {
					errorDiv.textContent = result.body.message || "Error deleting group.";
					errorDiv.classList.remove("d-none");
					setTimeout(() => errorDiv.classList.add("d-none"), 3000);
				}
			})
			.catch(error => {
				const errorDiv = document.getElementById("deleteGroupError");
				errorDiv.textContent = "Error deleting group: " + error.message;
				errorDiv.classList.remove("d-none");
				setTimeout(() => errorDiv.classList.add("d-none"), 3000);
			});
	}
</script>
