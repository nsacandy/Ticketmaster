﻿@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Ticketmaster.Utilities.ProjectManagementViewModel

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
	ViewData["Title"] = "Project Management";
}

<div class="container text-center">
	<h3 class="d-inline">Projects</h3>
	<button type="button" class="btn btn-success float-end" id="openCreateProjectModal">
		+
	</button>

	<div id="createProjectError" class="alert alert-danger mt-3 d-none" role="alert">
		Access denied. You must have admin or group manager privileges to access this feature.
	</div>


	<style>
		.selected {
			background-color: #007bff;
			color: white;
		}
	</style>

	<ul class="list-group mx-auto mt-3" style="max-width: 600px;" id="projectList">
		@foreach (var project in Model.Project)
		{
			var lead = Model.Groups
			.FirstOrDefault(g => g.ManagerId == project.ProjectLeadId)?
			.Manager?.Employee;

			var leadFullName = lead != null ? $"{lead.FirstName} {lead.LastName}" : "";
			var kanbanUrl = $"/Board/Project/{project.ProjectId}";

			<li class="list-group-item d-flex justify-content-between align-items-center project-item"
				data-projectid="@project.ProjectId"
				data-projectname="@project.ProjectName"
				data-projectdescription="@project.ProjectDescription"
				data-involvedgroups="@project.InvolvedGroups"
				data-projectlead="@project.ProjectLeadId">
				<span>
					@project.ProjectName @(string.IsNullOrEmpty(leadFullName) ? "" : $"({leadFullName})")
				</span>

				<span>
					<button class="btn btn-outline-primary btn-sm me-2"
							onclick="openEditProjectModal('@project.ProjectId', '@project.ProjectName', '@project.ProjectDescription')"
							title="Edit Project">
						✏️
					</button>

					<a class="btn btn-outline-secondary btn-sm"
					   href="@kanbanUrl"
					   title="View Board">
						📋
					</a>
				</span>
			</li>
		}
	</ul>

</div>

<!-- Create Project Modal -->
<div class="modal fade" id="createProjectModal" tabindex="-1" aria-labelledby="createProjectModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="createProjectModalLabel">Create New Project</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="projectCreationForm">
					<div class="mb-3">
						<label for="projectName" class="form-label">Project Name</label>
						<input type="text" id="projectName" name="projectName" class="form-control" required />
					</div>

					<div class="mb-3">
						<label for="projectDescription" class="form-label">Description</label>
						<textarea id="projectDescription" name="projectDescription" class="form-control" required></textarea>
					</div>

					<div class="mb-3">
						<label class="form-label">Lead</label>
						<input type="text" id="projectLeadBox" class="form-control" readonly />
					</div>

					<div class="row">
						<div class="col-md-4">
							<label class="form-label">Available Groups</label>
							<input type="text" id="searchGroup" class="form-control mb-2" placeholder="Search...">
							<ul class="list-group" id="availableGroupsList">
								@foreach (var group in Model.Groups)
								{
									<li class="list-group-item group-item"
										data-groupid="@group.GroupId"
										data-groupname="@group.GroupName"
										data-managerid="@group.ManagerId"
										data-managername="@(group.Manager != null ? group.Manager.Employee.FirstName + " " + group.Manager.Employee.LastName : "No Manager")">
										@group.GroupName
									</li>
								}
							</ul>
						</div>

						<div class="col-md-2 text-center mt-4">
							<button type="button" class="btn btn-secondary mb-2" id="setProjectLeadBtn">L</button><br>
							<button type="button" class="btn btn-primary mb-2" id="addGroupBtn">→</button><br>
							<button type="button" class="btn btn-primary" id="removeGroupBtn">←</button>
						</div>

						<div class="col-md-3">
							<label class="form-label">Project Groups</label>
							<ul class="list-group" id="projectGroupsList"></ul>
						</div>

						<div class="col-md-3">
							<label class="form-label">Group Managers</label>
							<ul class="list-group" id="groupManagersList"></ul>
						</div>
					</div>

					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
						<button type="submit" class="btn btn-primary">Create Project</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Edit Project Modal -->
<div class="modal fade" id="editProjectModal" tabindex="-1" aria-labelledby="editProjectModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="editProjectModalLabel">Edit Project</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="editProjectForm">
					<div class="mb-3">
						<label for="editProjectName" class="form-label">Project Name</label>
						<input type="text" id="editProjectName" name="projectName" class="form-control" required />
					</div>

					<div class="mb-3">
						<label for="editProjectDescription" class="form-label">Description</label>
						<textarea id="editProjectDescription" name="projectDescription" class="form-control" required></textarea>
					</div>

					<div class="mb-3">
						<label class="form-label">Lead</label>
						<input type="text" id="editProjectLeadBox" class="form-control" readonly />
					</div>

					<div class="row">
						<div class="col-md-4">
							<label class="form-label">Available Groups</label>
							<input type="text" id="editSearchGroup" class="form-control mb-2" placeholder="Search...">
							<ul class="list-group" id="editAvailableGroupsList"></ul>
						</div>

						<div class="col-md-2 text-center mt-4" id="editProjectActionButtons">
							<button type="button" class="btn btn-secondary mb-2" id="editSetProjectLeadBtn">L</button><br>
							<button type="button" class="btn btn-primary mb-2" id="editAddGroupBtn">→</button><br>
							<button type="button" class="btn btn-primary" id="editRemoveGroupBtn">←</button>
						</div>

						<div class="col-md-3">
							<label class="form-label">Project Groups</label>
							<ul class="list-group" id="editProjectGroupsList"></ul>
						</div>

						<div class="col-md-3">
							<label class="form-label">Group Managers</label>
							<ul class="list-group" id="editGroupManagersList"></ul>
						</div>
					</div>

					<div class="modal-footer" id="editProjectModalFooter">
						<button type="button" class="btn btn-danger" id="deleteProjectBtn">Delete</button>
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
						<button type="submit" class="btn btn-primary">Edit Project</button>
					</div>

				</form>
			</div>
		</div>
	</div>
</div>

<script>
	// ========= GLOBAL VARIABLES =========
	let availableGroupsList, projectGroupsList, groupManagersList, projectLeadBox;
	let editAvailableGroupsList, editProjectGroupsList, editGroupManagersList, editProjectLeadBox;
	let selectedGroup = null, selectedManager = null, previousLead = null;
	let selectedEditGroup = null, selectedEditManager = null, previousEditLead = null;
	let selectedProjectId = null;

	const loggedInUserId = '@ViewBag.LoggedInUserId';
	const isAdmin = '@ViewBag.IsAdmin'.toLowerCase() === 'true';

	// ========= MAIN EVENT BINDINGS =========
	document.addEventListener("DOMContentLoaded", function () {
		// Initialize elements
		availableGroupsList = document.getElementById("availableGroupsList");
		projectGroupsList = document.getElementById("projectGroupsList");
		groupManagersList = document.getElementById("groupManagersList");
		projectLeadBox = document.getElementById("projectLeadBox");

		editAvailableGroupsList = document.getElementById("editAvailableGroupsList");
		editProjectGroupsList = document.getElementById("editProjectGroupsList");
		editGroupManagersList = document.getElementById("editGroupManagersList");
		editProjectLeadBox = document.getElementById("editProjectLeadBox");

		// Open Create Modal Button
		document.getElementById("openCreateProjectModal").addEventListener("click", handleCreateModalOpen);

		// Group selection
		document.querySelectorAll("#availableGroupsList .list-group-item, #projectGroupsList .list-group-item").forEach(item => {
			item.addEventListener("click", () => selectGroup(item.parentElement, item));
		});

		// Add/Remove Group in Create Modal
		document.getElementById("addGroupBtn").addEventListener("click", addGroupToProject);
		document.getElementById("removeGroupBtn").addEventListener("click", removeGroupFromProject);

		// Set Lead (Create)
		document.getElementById("setProjectLeadBtn").addEventListener("click", setProjectLead);

		// Submit Create Project
		document.getElementById("projectCreationForm").addEventListener("submit", handleProjectCreate);

		// Submit Edit Project
		document.getElementById("editProjectForm").addEventListener("submit", handleProjectEdit);

		// Delete Project
		document.getElementById("deleteProjectBtn").addEventListener("click", handleProjectDelete);
	});

	// ========= MODAL OPENERS =========
	function openEditProjectModal(projectId, projectName, projectDescription) {
		const projectLeadId = document.querySelector(`.project-item[data-projectid='${projectId}']`).getAttribute("data-projectlead");
		selectedProjectId = projectId;

		const editNameInput = document.getElementById("editProjectName");
		const editDescInput = document.getElementById("editProjectDescription");
		const modalFooter = document.getElementById("editProjectModalFooter");
		const actionButtonsDiv = document.getElementById("editProjectActionButtons");

		editNameInput.value = projectName;
		editDescInput.value = projectDescription;

		editNameInput.readOnly = true;
		editDescInput.readOnly = true;
		modalFooter.style.display = "none";
		actionButtonsDiv.style.display = "none";

		if (isAdmin || projectLeadId === loggedInUserId) {
			editNameInput.readOnly = false;
			editDescInput.readOnly = false;
			modalFooter.style.display = "flex";
			actionButtonsDiv.style.display = "block";
		}

		editProjectLeadBox.value =
			document.querySelector(`.group-item[data-managerid='${projectLeadId}']`)?.getAttribute("data-managername") || "No Lead";
		editProjectLeadBox.setAttribute("data-employeeid", projectLeadId);

		const involvedGroupIds = document.querySelector(`.project-item[data-projectid='${projectId}']`)
			.getAttribute("data-involvedgroups")
			.split(",")
			.map(id => id.trim());

		editProjectGroupsList.innerHTML = "";
		editAvailableGroupsList.innerHTML = "";
		editGroupManagersList.innerHTML = "";

		document.querySelectorAll("#availableGroupsList .list-group-item").forEach(groupItem => {
			const groupId = groupItem.getAttribute("data-groupid");
			const managerId = groupItem.getAttribute("data-managerid");
			const managerName = groupItem.getAttribute("data-managername");

			const newItem = groupItem.cloneNode(true);
			newItem.classList.remove("selected");

			if (involvedGroupIds.includes(groupId)) {
				editProjectGroupsList.appendChild(newItem);

				if (managerName !== "No Manager") {
					const managerItem = document.createElement("li");
					managerItem.classList.add("list-group-item");
					managerItem.setAttribute("data-managerid", managerId);
					managerItem.textContent = managerName;

					editGroupManagersList.appendChild(managerItem);
					attachEditManagerSelection(managerItem);
				}
			} else {
				editAvailableGroupsList.appendChild(newItem);
			}
		});

		attachEditEventListeners();

		// Show Modal
		new bootstrap.Modal(document.getElementById("editProjectModal")).show();
	}

	function handleCreateModalOpen() {
		const errorDiv = document.getElementById("createProjectError");
		const isGroupManager = Array.from(document.querySelectorAll("#availableGroupsList .group-item"))
			.some(group => group.getAttribute("data-managerid") === loggedInUserId);

		if (!isAdmin && !isGroupManager) {
			errorDiv.classList.remove("d-none");
			setTimeout(() => errorDiv.classList.add("d-none"), 4000);
			return;
		}

		new bootstrap.Modal(document.getElementById("createProjectModal")).show();
	}

	// ========= CREATE HANDLERS =========
	function selectGroup(list, item) {
		list.querySelectorAll(".list-group-item").forEach(i => i.classList.remove("selected"));
		item.classList.add("selected");
		selectedGroup = item;
	}

	function addGroupToProject() {
		if (selectedGroup && selectedGroup.parentElement === availableGroupsList) {
			projectGroupsList.appendChild(selectedGroup);
			selectedGroup.classList.remove("selected");

			const managerName = selectedGroup.getAttribute("data-managername");
			const managerId = selectedGroup.getAttribute("data-managerid");

			if (managerName !== "No Manager") {
				const managerItem = document.createElement("li");
				managerItem.classList.add("list-group-item");
				managerItem.setAttribute("data-managerid", managerId);
				managerItem.textContent = managerName;

				groupManagersList.appendChild(managerItem);
				attachManagerSelection(managerItem);
			}

			selectedGroup = null;
		}
	}

	function removeGroupFromProject() {
		if (selectedGroup && selectedGroup.parentElement === projectGroupsList) {
			availableGroupsList.appendChild(selectedGroup);
			const managerId = selectedGroup.getAttribute("data-managerid");
			document.querySelector(`#groupManagersList .list-group-item[data-managerid='${managerId}']`)?.remove();

			selectedGroup.classList.remove("selected");
			selectedGroup = null;
		}
	}

	function attachManagerSelection(item) {
		item.addEventListener("click", () => {
			groupManagersList.querySelectorAll(".list-group-item").forEach(i => i.classList.remove("selected"));
			item.classList.add("selected");
			selectedManager = item;
		});
	}

	function setProjectLead() {
		if (selectedManager && selectedManager.parentElement === groupManagersList) {
			if (previousLead) {
				groupManagersList.appendChild(previousLead);
			}

			projectLeadBox.value = selectedManager.textContent;
			projectLeadBox.setAttribute("data-employeeid", selectedManager.getAttribute("data-managerid"));

			previousLead = selectedManager;
			selectedManager.remove();
			selectedManager = null;
		}
	}

	function handleProjectCreate(event) {
		event.preventDefault();

		const projectName = document.getElementById("projectName").value.trim();
		const projectDescription = document.getElementById("projectDescription").value.trim();
		const projectLeadId = parseInt(projectLeadBox.getAttribute("data-employeeid")) || 0;
		const selectedGroups = [...document.querySelectorAll("#projectGroupsList .list-group-item")]
			.map(item => parseInt(item.getAttribute("data-groupid")));

		if (!projectName || !projectDescription || projectLeadId === 0 || selectedGroups.length === 0) {
			alert("All fields must be completed.");
			return;
		}

		const requestData = {
			projectName,
			projectDescription,
			projectLeadId,
			involvedGroups: selectedGroups
		};

		fetch("/ProjectManagement/CreateProject", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(requestData)
		})
			.then(res => res.json().then(data => ({ status: res.status, body: data })))
			.then(result => {
				if (result.status === 200) {
					alert(result.body.message);
					location.reload();
				} else {
					alert("Error creating project: " + result.body.message);
				}
			})
			.catch(error => alert("Error: " + error.message));
	}

	// ========= EDIT HANDLERS =========
	function attachEditEventListeners() {
		document.querySelectorAll("#editAvailableGroupsList .list-group-item, #editProjectGroupsList .list-group-item").forEach(item => {
			item.addEventListener("click", () => {
				editAvailableGroupsList.querySelectorAll(".list-group-item").forEach(i => i.classList.remove("selected"));
				item.classList.add("selected");
				selectedEditGroup = item;
			});
		});
	}

	function attachEditManagerSelection(item) {
		item.addEventListener("click", () => {
			editGroupManagersList.querySelectorAll(".list-group-item").forEach(i => i.classList.remove("selected"));
			item.classList.add("selected");
			selectedEditManager = item;
		});
	}

	document.getElementById("editAddGroupBtn").addEventListener("click", () => {
		if (selectedEditGroup && selectedEditGroup.parentElement === editAvailableGroupsList) {
			editProjectGroupsList.appendChild(selectedEditGroup);
			selectedEditGroup.classList.remove("selected");

			const managerName = selectedEditGroup.getAttribute("data-managername");
			const managerId = selectedEditGroup.getAttribute("data-managerid");

			if (managerName !== "No Manager") {
				const managerItem = document.createElement("li");
				managerItem.classList.add("list-group-item");
				managerItem.setAttribute("data-managerid", managerId);
				managerItem.textContent = managerName;

				editGroupManagersList.appendChild(managerItem);
				attachEditManagerSelection(managerItem);
			}

			selectedEditGroup = null;
		}
	});

	document.getElementById("editRemoveGroupBtn").addEventListener("click", () => {
		if (selectedEditGroup && selectedEditGroup.parentElement === editProjectGroupsList) {
			editAvailableGroupsList.appendChild(selectedEditGroup);
			const managerId = selectedEditGroup.getAttribute("data-managerid");
			document.querySelector(`#editGroupManagersList .list-group-item[data-managerid='${managerId}']`)?.remove();

			selectedEditGroup.classList.remove("selected");
			selectedEditGroup = null;
		}
	});

	document.getElementById("editSetProjectLeadBtn").addEventListener("click", () => {
		if (selectedEditManager && selectedEditManager.parentElement === editGroupManagersList) {
			if (previousEditLead) {
				editGroupManagersList.appendChild(previousEditLead);
			}

			editProjectLeadBox.value = selectedEditManager.textContent;
			editProjectLeadBox.setAttribute("data-employeeid", selectedEditManager.getAttribute("data-managerid"));

			previousEditLead = selectedEditManager;
			selectedEditManager.remove();
			selectedEditManager = null;
		}
	});

	function handleProjectEdit(event) {
		event.preventDefault();

		const projectName = document.getElementById("editProjectName").value.trim();
		const projectDescription = document.getElementById("editProjectDescription").value.trim();
		const projectLeadId = parseInt(editProjectLeadBox.getAttribute("data-employeeid")) || 0;
		const selectedGroups = [...document.querySelectorAll("#editProjectGroupsList .list-group-item")]
			.map(item => parseInt(item.getAttribute("data-groupid")));

		if (!projectName || !projectDescription || projectLeadId === 0 || selectedGroups.length === 0) {
			alert("All fields must be completed.");
			return;
		}

		const requestData = {
			projectId: selectedProjectId,
			projectName,
			projectDescription,
			projectLeadId,
			involvedGroups: selectedGroups
		};

		fetch("/ProjectManagement/EditProject", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(requestData)
		})
			.then(res => res.json().then(data => ({ status: res.status, body: data })))
			.then(result => {
				if (result.status === 200) {
					alert(result.body.message);
					location.reload();
				} else {
					alert("Error updating project: " + result.body.message);
				}
			})
			.catch(error => alert("Error: " + error.message));
	}

	function handleProjectDelete() {
		if (!selectedProjectId) return;
		if (!confirm("Are you sure you want to delete this project? This action cannot be undone.")) return;

		fetch("/ProjectManagement/DeleteProject", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ projectId: selectedProjectId })
		})
			.then(res => res.json().then(data => ({ status: res.status, body: data })))
			.then(result => {
				if (result.status === 200) {
					alert(result.body.message);
					location.reload();
				} else {
					alert("Error deleting project: " + result.body.message);
				}
			})
			.catch(error => alert("Error: " + error.message));
	}
</script>