@model Ticketmaster.Models.Board

@{
    bool isAdmin = ViewBag.IsAdmin ?? false;
    bool isProjectLead = ViewBag.IsProjectLead ?? false;
}

@{
    ViewData["Title"] = $"{Model.ParentProject?.ProjectName} Board";
    var assignedEmployees = ViewBag.AssignedEmployees as List<Ticketmaster.Models.Employee>;
}

<style>
    .stage-column {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    min-width: 300px;
    max-width: 350px;
    flex-shrink: 0;
    height: 100%;
    }

    .task-card {
    background-color: #ffffff;
    border: 1px solid #dee2e6;
    border-radius: 5px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .kanban-wrapper {
    display: flex;
    overflow-x: auto;
    gap: 20px;
    padding-bottom: 20px;
    }

    .task-description {
    margin-top: 8px;
    font-size: 0.9rem;
    }

    .task-buttons {
    margin-top: 10px;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    }

    .stage-column,
    .stage-column * {
    color: #000000 !important;
    }

    .task-card,
    .task-card * {
    color: #000000 !important;
    }

    .task-card .text-muted {
    color: #6c757d !important;
    }
</style>

<h2 class="mb-4">@ViewData["Title"]</h2>

@if (isAdmin || isProjectLead)
{
    <a asp-action="Create" asp-route-projectId="@Model.ParentProjectId" class="btn btn-primary mb-4">+ Add Stage</a>
}

@if (Model.Stages == null || !Model.Stages.Any())
{
    <p><em>No stages available. Please add a stage to get started.</em></p>
}
else
{
    <div class="kanban-wrapper">
        @foreach (var stage in Model.Stages.OrderBy(s => s.Position))
        {
            <div class="stage-column">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    @if (isAdmin || isProjectLead)
                    {
                        <div class="mb-2 text-center">
                            <form method="post" asp-action="SwapStagePosition" class="d-inline">
                                <input type="hidden" name="stageId" value="@stage.StageId" />
                                <input type="hidden" name="direction" value="left" />
                                <button type="submit" class="btn btn-sm btn-outline-dark me-1">←</button>
                            </form>
                            <form method="post" asp-action="SwapStagePosition" class="d-inline">
                                <input type="hidden" name="stageId" value="@stage.StageId" />
                                <input type="hidden" name="direction" value="right" />
                                <button type="submit" class="btn btn-sm btn-outline-dark">→</button>
                            </form>
                        </div>
                    }

                    <h5>@stage.StageTitle</h5>
                    <div>
                        @if (isAdmin || isProjectLead)
                        {
                            <a asp-action="Edit" asp-route-id="@stage.StageId" class="btn btn-sm btn-outline-warning">Edit</a>
                            <a asp-action="Delete" asp-route-id="@stage.StageId" class="btn btn-sm btn-outline-danger">Delete</a>
                        }
                    </div>
                </div>

                @if (stage?.Tasks?.Any() == true)
                {
                    foreach (var task in stage.Tasks)
                    {
                        var assignedEmail = assignedEmployees?.FirstOrDefault(e => e.Id == task.AssignedTo)?.Email ?? "";

                        <div class="task-card">
                            <div class="task-header">
                                <strong>@task.Title</strong>
                                @if (!string.IsNullOrEmpty(assignedEmail))
                                {
                                    <small class="text-muted">@assignedEmail</small>
                                }
                            </div>

                            <div class="task-description">@task.Description</div>

                            <div class="task-buttons">
                                <form asp-action="DeleteTask" method="post" class="d-inline">
                                    <input type="hidden" name="taskId" value="@task.TaskItemId" />
                                    <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                                </form>

                                <button class="btn btn-sm btn-outline-secondary"
                                        data-bs-toggle="modal"
                                        data-bs-target="#moveTaskModal"
                                        data-task-id="@task.TaskItemId"
                                        data-current-stage="@stage.StageId">
                                    Move
                                </button>

                                <button class="btn btn-sm btn-outline-primary"
                                        data-bs-toggle="modal"
                                        data-bs-target="#assignTaskModal"
                                        data-task-id="@task.TaskItemId"
                                        data-stage-id="@stage.StageId">
                                    Assign
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p><em>No tasks yet.</em></p>
                }

                <!-- Add Task Form -->
                <form asp-action="AddTask" method="post" class="mt-3">
                    <input type="hidden" name="stageId" value="@stage.StageId" />
                    <div class="mb-2">
                        <input name="title" class="form-control" placeholder="Task title" required />
                    </div>
                    <div class="mb-2">
                        <input name="description" class="form-control" placeholder="Description (optional)" />
                    </div>
                    <button type="submit" class="btn btn-sm btn-success">+ Add Task</button>
                </form>
            </div>
        }
    </div>

    <!-- Move Task -->
    <div class="modal fade" id="moveTaskModal" tabindex="-1" aria-labelledby="moveTaskModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form method="post" asp-action="MoveTask">
                    <div class="modal-header">
                        <h5 class="modal-title" id="moveTaskModalLabel">Move Task to Another Stage</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" name="taskId" id="moveTaskId" />
                        <div class="mb-3">
                            <label for="targetStageId" class="form-label">Select Target Stage</label>
                            <select class="form-select" id="targetStageId" name="targetStageId" required>
                                @foreach (var s in Model.Stages)
                                {
                                    <option value="@s.StageId">@s.StageTitle</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Move</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Assigning Task -->
    <div class="modal fade" id="assignTaskModal" tabindex="-1" aria-labelledby="assignTaskLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="assignTaskLabel">Assign Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="assignTaskForm">
                        <input type="hidden" id="assignTaskId" name="taskId" />

                        <div class="mb-3">
                            <label for="assignedEmployee" class="form-label">Select Employee</label>
                            <select class="form-select" id="assignedEmployee" name="employeeId" required>
                                <option value="" disabled selected>Select employee...</option>
                                @foreach (var emp in ViewBag.AssignedEmployees)
                                {
                                    <option value="@emp.Id">@emp.FirstName @emp.LastName (@emp.Email)</option>
                                }
                            </select>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Assign Task</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>

		let selectedTaskId = null;
		let selectedEmployeeId = null;

		document.addEventListener("DOMContentLoaded", function () {
			const assignModal = document.getElementById("assignTaskModal");
			assignModal.addEventListener("show.bs.modal", function (event) {
				const button = event.relatedTarget;
				const taskId = button.getAttribute("data-task-id");
				document.getElementById("assignTaskId").value = taskId;
			});

			document.getElementById("assignTaskForm").addEventListener("submit", function (event) {
				event.preventDefault();

				const selectedEmployeeId = document.getElementById("assignedEmployee").value;

				if (!selectedTaskId || selectedEmployeeId === "" || selectedEmployeeId === null) {
					alert("Please select an employee.");
					return;
				}

				console.log("Assigning Task:", selectedTaskId, "to", selectedEmployeeId);

                fetch("/Board/AssignTask", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ taskId: selectedTaskId, employeeId: selectedEmployeeId })
                })
                .then(response =>
                    response.json().then(data => ({ status: response.status, body: data }))
                )
                .then(result => {
                    if (result.status === 200) {
                        alert(result.body.message);
                        const modal = bootstrap.Modal.getInstance(document.getElementById("assignTaskModal"));
                        modal.hide();
                        location.reload();
                    } else if (result.status === 403) {
                        alert(result.body.message || "Access denied.");
                    } else {
                        alert(result.body.message || "Error assigning task.");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("Unexpected error occurred while assigning task.");
                });
			});

			document.getElementById('assignTaskModal').addEventListener('show.bs.modal', function (event) {
				const button = event.relatedTarget;
				selectedTaskId = button.getAttribute('data-task-id');
			});

			document.querySelectorAll(".assign-employee-item").forEach(item => {
				item.addEventListener("click", function () {
					document.querySelectorAll(".assign-employee-item").forEach(i => i.classList.remove("selected"));
					this.classList.add("selected");
					selectedEmployeeId = this.getAttribute("data-employeeid");
				});
			});

		});

        var moveModal = document.getElementById('moveTaskModal');

        moveModal.addEventListener('show.bs.modal', function (event) {
          var button = event.relatedTarget;
          var taskId = button.getAttribute('data-task-id');
          var currentStageId = button.getAttribute('data-current-stage');

          var input = document.getElementById('moveTaskId');
          input.value = taskId;

          var dropdown = document.getElementById('targetStageId');
          Array.from(dropdown.options).forEach(opt => {
            opt.hidden = opt.value === currentStageId;
          });
          dropdown.selectedIndex = Array.from(dropdown.options).findIndex(opt => !opt.hidden);
        });
    </script>
}