// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketmaster.Data;

#nullable disable

namespace Ticketmaster.Migrations
{
    [DbContext(typeof(TicketmasterContext))]
    [Migration("20250408214053_InitBoardModels")]
    partial class InitBoardModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ticketmaster.Models.Board", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Title", "ParentProjectId");

                    b.HasIndex("ParentProjectId");

                    b.ToTable("Board");
                });

            modelBuilder.Entity("Ticketmaster.Models.BoardTask", b =>
                {
                    b.Property<int>("ParentBoardId")
                        .HasColumnType("int");

                    b.Property<string>("TaskTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ParentBoardParentProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ParentBoardTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentBoardId", "TaskTitle");

                    b.HasIndex("ParentBoardTitle", "ParentBoardParentProjectId");

                    b.ToTable("BoardTask");
                });

            modelBuilder.Entity("Ticketmaster.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ERole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ERole");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNum");

                    b.Property<string>("Pword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pword");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ERole = "admin",
                            Email = "admin@ticketmaster.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PhoneNum = "123-456-7890",
                            Pword = "AQAAAAIAAYagAAAAEDcDC4XjTw9FQA74cKwM/zxETLtgCJ20mT3HKdvyelI5GIxiE0rIKfcRPYQhdEnV/A=="
                        });
                });

            modelBuilder.Entity("Ticketmaster.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("EmployeeIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("Ticketmaster.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("Ticketmaster.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("InvolvedGroups")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectLeadId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProjectId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Ticketmaster.Models.Board", b =>
                {
                    b.HasOne("Ticketmaster.Models.Project", "ParentProject")
                        .WithMany()
                        .HasForeignKey("ParentProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentProject");
                });

            modelBuilder.Entity("Ticketmaster.Models.BoardTask", b =>
                {
                    b.HasOne("Ticketmaster.Models.Board", "ParentBoard")
                        .WithMany("Tasks")
                        .HasForeignKey("ParentBoardTitle", "ParentBoardParentProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentBoard");
                });

            modelBuilder.Entity("Ticketmaster.Models.Group", b =>
                {
                    b.HasOne("Ticketmaster.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Ticketmaster.Models.Manager", b =>
                {
                    b.HasOne("Ticketmaster.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Ticketmaster.Models.Board", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
